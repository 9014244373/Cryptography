#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_SIZE 1000

float english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406,
    6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

void calculate_frequency(const char *text, float freq[ALPHABET_SIZE]) {
    int count[ALPHABET_SIZE] = {0};
    int total_letters = 0;
    int i;

    for (i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            count[toupper(text[i]) - 'A']++;
            total_letters++;
        }
    }

    for (i = 0; i < ALPHABET_SIZE; i++) {
        freq[i] = ((float)count[i] / total_letters) * 100;
    }
}

void decrypt_with_shift(const char *ciphertext, char *plaintext, int shift) {
    int i;

    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = (ciphertext[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE + base;
        } else {
            plaintext[i] = ciphertext[i];  
        }
    }
    plaintext[i] = '\0';
}

float chi_squared_stat(float observed_freq[ALPHABET_SIZE]) {
    float chi_squared = 0.0;
    int i;

    for (i = 0; i < ALPHABET_SIZE; i++) {
        float expected = english_freq[i];  
        float observed = observed_freq[i];
        if (expected != 0) {
            chi_squared += ((observed - expected) * (observed - expected)) / expected;
        }
    }

    return chi_squared;
}

void sort_by_likelihood(float chi_squared_values[ALPHABET_SIZE], int shifts[ALPHABET_SIZE]) {
    int i, j;

    for (i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (j = i + 1; j < ALPHABET_SIZE; j++) {
            if (chi_squared_values[i] > chi_squared_values[j]) {
                
                float temp = chi_squared_values[i];
                chi_squared_values[i] = chi_squared_values[j];
                chi_squared_values[j] = temp;

                int temp_shift = shifts[i];
                shifts[i] = shifts[j];
                shifts[j] = temp_shift;
            }
        }
    }
}

void display_top_n_plaintexts(const char *ciphertext, int top_n) {
    float chi_squared_values[ALPHABET_SIZE];
    int shifts[ALPHABET_SIZE];
    char possible_plaintext[MAX_TEXT_SIZE];
    int shift;

    for (shift = 0; shift < ALPHABET_SIZE; shift++) {
        
        decrypt_with_shift(ciphertext, possible_plaintext, shift);

        float decrypted_freq[ALPHABET_SIZE] = {0};
        calculate_frequency(possible_plaintext, decrypted_freq);

        chi_squared_values[shift] = chi_squared_stat(decrypted_freq);
        shifts[shift] = shift;  
    }

    sort_by_likelihood(chi_squared_values, shifts);

    printf("\nTop %d Possible Plaintexts (by likelihood):\n", top_n);
    for (shift = 0; shift < top_n && shift < ALPHABET_SIZE; shift++) {
        decrypt_with_shift(ciphertext, possible_plaintext, shifts[shift]);
        printf("%2d. Shift = %2d: %s\n", shift + 1, shifts[shift], possible_plaintext);
    }
}

int main() {
    char ciphertext[MAX_TEXT_SIZE];
    int top_n;

    printf("Enter the ciphertext (uppercase letters only): ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &top_n);

    display_top_n_plaintexts(ciphertext, top_n);

    return 0;
}
