#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 64
int initial_perm[BLOCK_SIZE] = {58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16,
 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};
int final_perm[BLOCK_SIZE] = {40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 
45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};


int exp_table[48] = {32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 
19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1};


int sbox[8][4][16] = {
    {{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},{4,1,14,8,13,6,
	2,11,15,12,9,7,3,10,5,0},{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}},
    
};
int perm[32] = {16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25};
int pc1[56] = { };
int pc2[48] = { };

int shifts[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
void permute(int* in, int* out, int* table, int n) {
    int i;
    for (i = 0; i < n; i++) out[i] = in[table[i] - 1];
}
void left_shift(int* key, int shift_count) {
    int i, temp[28];
    for (i = 0; i < shift_count; i++) {
        temp[i] = key[i];
        key[i] = key[i + 1];
    }
    key[27] = temp[0];
}
void generate_keys(int* key, int keys[16][48]) {
    int i, shifted_key[56], round_key[48];
    permute(key, shifted_key, pc1, 56);
    for (i = 15; i >= 0; i--) {
        left_shift(shifted_key, shifts[i]);
        permute(shifted_key, round_key, pc2, 48);
        int j;
        for (j = 0; j < 48; j++) keys[15 - i][j] = round_key[j];
    }
}
void des_round(int* in, int* out, int* key) {
    int i, expanded[48], substituted[32];
    permute(in, expanded, exp_table, 48);
    for (i = 0; i < 48; i++) expanded[i] ^= key[i];

    for (i = 0; i < 8; i++) {
        int row = (expanded[i * 6] << 1) | expanded[i * 6 + 5];
        int col = (expanded[i * 6 + 1] << 3) | (expanded[i * 6 + 2] << 2) | (expanded[i * 6 + 3] << 1) | expanded[i * 6 + 4];
        int val = sbox[i][row][col];
        substituted[i * 4 + 0] = (val >> 3) & 1;
        substituted[i * 4 + 1] = (val >> 2) & 1;
        substituted[i * 4 + 2] = (val >> 1) & 1;
        substituted[i * 4 + 3] = val & 1;
    }
    permute(substituted, out, perm, 32);
}
void des_decrypt(int* block, int* key) {
    int i, j, round_keys[16][48], left[32], right[32], temp[32];
    generate_keys(key, round_keys);
    permute(block, block, initial_perm, BLOCK_SIZE);
    
    for (i = 0; i < 32; i++) {
        left[i] = block[i];
        right[i] = block[i + 32];
    }

    for (i = 15; i >= 0; i--) {
        int round_result[32];
        des_round(right, round_result, round_keys[i]);
        for (j = 0; j < 32; j++) temp[j] = right[j];
        for (j = 0; j < 32; j++) right[j] = left[j] ^ round_result[j];
        for (j = 0; j < 32; j++) left[j] = temp[j];
    }
    
    for (i = 0; i < 32; i++) block[i] = right[i];
    for (i = 0; i < 32; i++) block[i + 32] = left[i];
    permute(block, block, final_perm, BLOCK_SIZE);
}

int main() {
    int key[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // 64-bit key
    int block[64] = {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1}; // 64-bit ciphertext block

    des_decrypt(block, key);
    printf("Decrypted block: ");
    int i;
    for (i = 0; i < 64; i++) printf("%d", block[i]);
    printf("\n");
    return 0;
}
