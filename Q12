def char_to_num(c):
    return ord(c) - ord('a')

def num_to_char(n):
    return chr(n + ord('a'))

def mod_inverse(a, m):
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    raise ValueError("Modular inverse does not exist")

def find_inverse_key_matrix(key_matrix):
    det = (key_matrix[0][0] * key_matrix[1][1] - key_matrix[0][1] * key_matrix[1][0]) % 26
    if det < 0:
        det += 26
    inv_det = mod_inverse(det, 26)
    
    inverse_matrix = [[0, 0], [0, 0]]
    inverse_matrix[0][0] = (key_matrix[1][1] * inv_det) % 26
    inverse_matrix[0][1] = (-key_matrix[0][1] * inv_det) % 26
    inverse_matrix[1][0] = (-key_matrix[1][0] * inv_det) % 26
    inverse_matrix[1][1] = (key_matrix[0][0] * inv_det) % 26
    
    # Ensure positive values
    inverse_matrix = [[(val + 26) % 26 for val in row] for row in inverse_matrix]
    
    return inverse_matrix

def hill_cipher_encrypt(message, key_matrix):
    message = message.replace(" ", "").lower()
    if len(message) % 2 != 0:
        message += 'x'
    
    encrypted_message = ''
    for i in range(0, len(message), 2):
        pair = [char_to_num(message[i]), char_to_num(message[i + 1])]
        encrypted_pair = [
            (key_matrix[0][0] * pair[0] + key_matrix[0][1] * pair[1]) % 26,
            (key_matrix[1][0] * pair[0] + key_matrix[1][1] * pair[1]) % 26
        ]
        encrypted_message += num_to_char(encrypted_pair[0]) + num_to_char(encrypted_pair[1])
    
    return encrypted_message

def hill_cipher_decrypt(ciphertext, key_matrix):
    inverse_matrix = find_inverse_key_matrix(key_matrix)
    
    decrypted_message = ''
    for i in range(0, len(ciphertext), 2):
        pair = [char_to_num(ciphertext[i]), char_to_num(ciphertext[i + 1])]
        decrypted_pair = [
            (inverse_matrix[0][0] * pair[0] + inverse_matrix[0][1] * pair[1]) % 26,
            (inverse_matrix[1][0] * pair[0] + inverse_matrix[1][1] * pair[1]) % 26
        ]
        decrypted_message += num_to_char(decrypted_pair[0]) + num_to_char(decrypted_pair[1])
    
    return decrypted_message

def main():
    key_matrix = [[9, 4], [5, 7]]
    message = "meet me at the usual place at ten rather than eight oclock"
    
    encrypted_message = hill_cipher_encrypt(message, key_matrix)
    print("Encrypted Message:", encrypted_message)
    
    decrypted_message = hill_cipher_decrypt(encrypted_message, key_matrix)
    print("Decrypted Message:", decrypted_message)

if __name__ == "__main__":
    main()
