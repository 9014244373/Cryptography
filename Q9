#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE];

void generateMatrix(char key[]) {
    int used[26] = {0}, x = 0, y = 0, i;
    for (i = 0; key[i] != '\0'; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (ch >= 'A' && ch <= 'Z' && !used[ch - 'A']) {
            matrix[x][y++] = ch; used[ch - 'A'] = 1;
            if (y == SIZE) x++, y = 0;
        }
    }
    for (i = 0; i < 26; i++) {
        if (i + 'A' != 'J' && !used[i]) {
            matrix[x][y++] = i + 'A';
            if (y == SIZE) x++, y = 0;
        }
    }
}

void findPosition(char ch, int *row, int *col) {
    int i, j;
    if (ch == 'J') ch = 'I';
    for (i = 0; i < SIZE; i++)
        for (j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) *row = i, *col = j;
}

void decryptPair(char a, char b, char *dec1, char *dec2) {
    int row1, col1, row2, col2;
    findPosition(a, &row1, &col1); findPosition(b, &row2, &col2);
    if (row1 == row2) *dec1 = matrix[row1][(col1 - 1 + SIZE) % SIZE], *dec2 = matrix[row2][(col2 - 1 + SIZE) % SIZE];
    else if (col1 == col2) *dec1 = matrix[(row1 - 1 + SIZE) % SIZE][col1], *dec2 = matrix[(row2 - 1 + SIZE) % SIZE][col2];
    else *dec1 = matrix[row1][col2], *dec2 = matrix[row2][col1];
}

void decryptPlayfair(char ciphertext[]) {
    int len = strlen(ciphertext), i, idx = 0;
    char decryptedText[200];
    for (i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]), b = toupper(ciphertext[i + 1]);
        if (a == ' ') i++, a = toupper(ciphertext[i]);
        if (b == ' ') i++, b = toupper(ciphertext[i + 1]);
        if (isalpha(a) && isalpha(b)) {
            decryptPair(a, b, &decryptedText[idx], &decryptedText[idx + 1]);
            idx += 2;
        }
    }
    decryptedText[idx] = '\0';
    printf("Decrypted Text: %s\n", decryptedText);
}

int main() {
    char key[] = "playfair example", ciphertext[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGON";
    generateMatrix(key);
    decryptPlayfair(ciphertext);
    return 0;
}
