#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1000
#define TOP_N 10
const double english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.317, 9.056,
    2.758, 0.978, 2.560, 0.150, 1.929, 0.074
};
double calculate_score(const char *text) {
    int letter_count[ALPHABET_SIZE] = {0};
    int length = 0;
    double score = 0.0;
    int i;
    for (i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            char ch = tolower(text[i]);
            letter_count[ch - 'a']++;
            length++;
        }
    }
    for (i = 0; i < ALPHABET_SIZE; i++) {
        double observed_freq = (double)letter_count[i] / length * 100;
        score -= (observed_freq - english_freq[i]) * (observed_freq - english_freq[i]);
    }

    return score;
}
void decrypt(const char *ciphertext, const char *key, char *plaintext) {
    int i;
    for (i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char ch = tolower(ciphertext[i]);
            plaintext[i] = key[ch - 'a'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0'; 
}
void rank_plaintexts(const char *ciphertext, int top_n) {
    char key[ALPHABET_SIZE + 1];
    char decrypted_text[MAX_TEXT_LENGTH];
    double scores[TOP_N] = {0};
    char top_plaintexts[TOP_N][MAX_TEXT_LENGTH] = {0};
    int i, j;
    for (i = 0; i < ALPHABET_SIZE; i++) {
        for (j = 0; j < ALPHABET_SIZE; j++) {
        }
    }

    for (i = 0; i < top_n; i++) {
        printf("Rank %d: %s with score %f\n", i + 1, top_plaintexts[i], scores[i]);
    }
}

int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    int top_n;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    printf("Enter the number of top plaintexts to display: ");
    scanf("%d", &top_n);
    if (top_n > TOP_N) {
        top_n = TOP_N;
    }

    rank_plaintexts(ciphertext, top_n);

    return 0;
}
