 #include <stdio.h>
#include <string.h>
#include <ctype.h>
void generate_cipher_sequence(const char *keyword, char cipher[]) {
    int i, j;
    int used[26] = {0};
    int k = 0;
    for (i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (ch >= 'A' && ch <= 'Z' && !used[ch - 'A']) {
            cipher[k++] = ch;
            used[ch - 'A'] = 1;
        }
    }
    for (i = 0; i < 26; i++) {
        if (!used[i]) {
            cipher[k++] = 'A' + i;
        }
    }
    cipher[k] = '\0'; 
}
void create_mapping(const char *cipher, char plain_to_cipher[], char cipher_to_plain[]) {
    int i;
    for (i = 0; i < 26; i++) {
        plain_to_cipher[i] = cipher[i];
        cipher_to_plain[cipher[i] - 'A'] = 'A' + i;
    }
}
void encrypt(const char *plaintext, const char *plain_to_cipher, char *ciphertext) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        char ch = toupper(plaintext[i]);
        if (ch >= 'A' && ch <= 'Z') {
            ciphertext[i] = plain_to_cipher[ch - 'A'];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}
void decrypt(const char *ciphertext, const char *cipher_to_plain, char *plaintext) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        char ch = toupper(ciphertext[i]);
        if (ch >= 'A' && ch <= 'Z') {
            plaintext[i] = cipher_to_plain[ch - 'A'];
        } else {
            plaintext[i] = ciphertext[i]; 
        }
    }
    plaintext[i] = '\0';
}
int main() {
    char keyword[] = "CIPHER";
    char cipher[27];
    char plain_to_cipher[26];
    char cipher_to_plain[26]; 
    char plaintext[100], ciphertext[100], decryptedtext[100];
    generate_cipher_sequence(keyword, cipher);
    printf("Cipher sequence: %s\n", cipher);
    create_mapping(cipher, plain_to_cipher, cipher_to_plain);
    printf("Enter plaintext: ");
    scanf(" %[^\n]%*c", plaintext);
    encrypt(plaintext, plain_to_cipher, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, cipher_to_plain, decryptedtext);
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
