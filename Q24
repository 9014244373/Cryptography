#include <stdio.h>

int gcdExtended(int a, int b, int *x, int *y);
int modInverse(int a, int m);
int isPrime(int num);
int findPrimeFactors(int n, int *p, int *q);

int main() {
    int n = 3599; 
    int e = 31;   
    int p, q;     
    int phi;      
    int d;        

    if (!findPrimeFactors(n, &p, &q)) {
        printf("Failed to find prime factors.\n");
        return 1;
    }
    phi = (p - 1) * (q - 1);
    d = modInverse(e, phi);

    if (d == -1) {
        printf("Modular inverse does not exist.\n");
        return 1;
    }
    printf("Prime factors: p = %d, q = %d\n", p, q);
    printf("Totient function phi(n) = %d\n", phi);
    printf("Private key d = %d\n", d);

    return 0;
}
int gcdExtended(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }

    int x1, y1;
    int gcd = gcdExtended(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}
int modInverse(int a, int m) {
    int x, y;
    int g = gcdExtended(a, m, &x, &y);

    if (g != 1) {
        return -1;
    }
    return (x % m + m) % m;
}
int isPrime(int num) {
    int i;

    if (num <= 1) return 0;
    if (num <= 3) return 1;
    if (num % 2 == 0 || num % 3 == 0) return 0;

    for (i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return 0;
    }

    return 1;
}
int findPrimeFactors(int n, int *p, int *q) {
    int i;

    for (i = 2; i <= n / 2; i++) {
        if (n % i == 0 && isPrime(i) && isPrime(n / i)) {
            *p = i;
            *q = n / i;
            return 1;
        }
    }
    return 0;
}
