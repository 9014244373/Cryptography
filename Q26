#include <stdio.h>
#include <stdlib.h>

unsigned long long gcd(unsigned long long a, unsigned long long b) {
    while (b != 0) {
        unsigned long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}


unsigned long long mod_exp(unsigned long long a, unsigned long long b, unsigned long long m) {
    unsigned long long result = 1;
    a = a % m;
    while (b > 0) {
        if (b % 2 == 1)  
            result = (result * a) % m;
        b = b >> 1;       
        a = (a * a) % m;  
    }
    return result;
}
unsigned long long mod_inverse(unsigned long long e, unsigned long long phi) {
    unsigned long long t = 0, newt = 1;
    unsigned long long r = phi, newr = e;
    while (newr != 0) {
        unsigned long long quotient = r / newr;
        t = t - quotient * newt;
        r = r - quotient * newr;
        t = newt;
        newr = r;
    }
    if (t < 0)
        t = t + phi;
    return t;
}

int main() {

    unsigned long long p = 61;
    unsigned long long q = 53;  
    unsigned long long n = p * q; 
    unsigned long long phi = (p - 1) * (q - 1);
    unsigned long long e = 17;
    if (gcd(e, phi) != 1) {
        printf("e and phi(n) are not coprime, choose a different e.\n");
        return 1;
    }
    unsigned long long d = mod_inverse(e, phi);

    printf("Public Key (e, n): (%llu, %llu)\n", e, n);
    printf("Private Key (d, n): (%llu, %llu)\n", d, n);
    unsigned long long message = 65;
    printf("Original message: %llu\n", message);
    unsigned long long ciphertext = mod_exp(message, e, n);
    printf("Encrypted message: %llu\n", ciphertext);
    unsigned long long decrypted = mod_exp(ciphertext, d, n);
    printf("Decrypted message: %llu\n", decrypted);

    return 0;
}
