#include <stdio.h>
#include <string.h>

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int mod_inverse(int a) {
    int i;
    for (i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1) {
            return i;
        }
    }
    return -1;  
}

void affine_encrypt(char *plaintext, int a, int b, char *ciphertext) {
    int i;
    int len = strlen(plaintext);
    
    for (i = 0; i < len; i++) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            ciphertext[i] = ((a * (plaintext[i] - 'A') + b) % 26) + 'A';
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            ciphertext[i] = ((a * (plaintext[i] - 'a') + b) % 26) + 'a';
        } else {
            ciphertext[i] = plaintext[i];  
        }
    }
    ciphertext[len] = '\0';  
}

void affine_decrypt(char *ciphertext, int a, int b, char *plaintext) {
    int i;
    int len = strlen(ciphertext);
    int a_inv = mod_inverse(a);  
    
    if (a_inv == -1) {
        printf("Decryption is not possible because 'a' has no modular inverse.\n");
        return;
    }
    
    for (i = 0; i < len; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = (a_inv * ((ciphertext[i] - 'A' - b + 26) % 26)) % 26 + 'A';
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = (a_inv * ((ciphertext[i] - 'a' - b + 26) % 26)) % 26 + 'a';
        } else {
            plaintext[i] = ciphertext[i];  
        }
    }
    plaintext[len] = '\0';  
}

int main() {
    char plaintext[256], ciphertext[256], decrypted_text[256];
    int a, b;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  

    printf("Enter value for 'a' (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter value for 'b': ");
    scanf("%d", &b);

    if (gcd(a, 26) != 1) {
        printf("'a' must be coprime with 26 for the cipher to be one-to-one.\n");
        return 1;
    }

    affine_encrypt(plaintext, a, b, ciphertext);
    printf("Encrypted Text: %s\n", ciphertext);

    affine_decrypt(ciphertext, a, b, decrypted_text);
    printf("Decrypted Text: %s\n", decrypted_text);

    return 0;
}
